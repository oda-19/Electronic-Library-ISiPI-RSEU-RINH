# Generated by Django 4.1.3 on 2022-12-20 21:12

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fioA', models.CharField(max_length=254, verbose_name='ФИО')),
                ('emailA', models.EmailField(blank=True, max_length=254)),
                ('temaA', models.CharField(max_length=12, verbose_name='Тема')),
                ('userTypeA', models.CharField(max_length=20, verbose_name='Роль')),
                ('answer', models.TextField(blank=True, max_length=400)),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Название')),
                ('author', models.CharField(max_length=100, verbose_name='Автор')),
                ('year', models.IntegerField(max_length=4, verbose_name='Год')),
                ('ganr', models.CharField(max_length=100, verbose_name='Жанр')),
                ('publisher', models.CharField(max_length=200, verbose_name='Издательство')),
                ('desc', models.TextField(max_length=1000, verbose_name='Аннотация')),
                ('pdf', models.FileField(upload_to='bookapp/pdfs/', verbose_name='PDF')),
                ('cover', models.ImageField(upload_to='bookapp/covers/', verbose_name='Обложка')),
                ('uploaded_by', models.CharField(max_length=100, verbose_name='Добавил пользователь')),
                ('user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='ID пользователя')),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='ID пользователя')),
                ('uploaded_by', models.CharField(max_length=100, verbose_name='Отправил пользователь')),
                ('fio', models.CharField(max_length=254, verbose_name='ФИО')),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('tema', models.CharField(choices=[('Регистрация', 'Регистрация'), ('Авторизация', 'Авторизация'), ('Книги', 'Книги'), ('Пользователи', 'Пользователи'), ('Новости', 'Новости'), ('Другое', 'Другое')], max_length=12, verbose_name='Тема')),
                ('userTypeF', models.CharField(choices=[('Регистрация', 'Регистрация'), ('Авторизация', 'Авторизация'), ('Книги', 'Книги'), ('Пользователи', 'Пользователи'), ('Новости', 'Новости'), ('Другое', 'Другое')], max_length=13, verbose_name='Роль')),
                ('message', models.TextField(blank=True, max_length=400)),
            ],
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Название')),
                ('text', models.TextField(max_length=1000, verbose_name='Текст публикации')),
                ('cover', models.ImageField(upload_to='bookapp/public/', verbose_name='Обложка')),
                ('uploaded_by', models.CharField(max_length=100, verbose_name='Добавил пользователь')),
                ('user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='ID пользователя')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('foto', models.ImageField(default='/bookapp/fotos/Avatar.jpg', null=True, upload_to='bookapp/fotos/', verbose_name='Аватар')),
                ('patronymic', models.CharField(default='', max_length=150, verbose_name='Отчество')),
                ('birth_day', models.DateField(default='2000-01-01', verbose_name='Дата рождения')),
                ('is_admin', models.BooleanField(default=False, verbose_name='Администратор')),
                ('is_publisher', models.BooleanField(default=False, verbose_name='Студент')),
                ('is_librarian', models.BooleanField(default=False, verbose_name='Преподаватель')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
